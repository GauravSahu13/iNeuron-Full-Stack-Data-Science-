# -*- coding: utf-8 -*-
"""DSA_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1liORFK-RRvxQM12139vDaXW_qJu5OMri

ðŸ’¡ **Q1.** Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

**Example:**
Input: nums = [2,7,11,15], target = 9
Output0 [0,1]

**Explanation:** Because nums[0] + nums[1] == 9, we return [0, 1][






Time complexity: O(n^2)

Space complexity: O(1)
"""

class Solution:
  def twoSum(self,nums: List[int], target: int):
    for i in range(len(nums)):
          for j in range(i + 1, len(nums)):
              if nums[j] == target - nums[i]:
                  return [i, j]

s1 = Solution()
s1.twoSum([2,7,11,13],9)

"""<aside>
ðŸ’¡ **Q2.** Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.

Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:

- Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.
- Return k.

**Example :**
Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2,_*,_*]

**Explanation:** Your function should return k = 2, with the first two elements of nums being 2. It does not matter what you leave beyond the returned k (hence they are underscores)[





</aside>











Time complexity: O(n)

Space complexity: O(1)
"""

class RemoveElement:
    def removeElement(self,nums: List[int], val: int):
        # Counter for keeping track of elements other than val
        count = 0
        # Loop through all the elements of the array
        for i in range(len(nums)):
            if nums[i] != val:
                # If the element is not val
                nums[count] = nums[i]
                count += 1
        return count

r1 = RemoveElement()
r1.removeElement([3,2,2,3],3)



"""<aside>
ðŸ’¡ **Q3.** Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

**Example 1:**
Input: nums = [1,3,5,6], target = 5

Output: 2

</aside>
"""

class Solution():
    def searchInsert(self, nums, target):
        # Last and First indexes
        start = 0
        end = len(nums) - 1
        
        # Traverse an array
        while (start <= end):
            mid = int((start + end)/2)
             
            # if target value found.
            if nums[mid] == target:
                return mid
            # If target value is greater then mid elements's value
            elif target > nums[mid]:
                start = mid + 1
            # otherwise target value is less, 
            else:
                end = mid -1
        # Return the insertion position
        return end + 1

s1= Solution()
s1.searchInsert([1,3,5,6], 7)



"""<aside>
ðŸ’¡ You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

**Example 1:**
Input: digits = [1,2,3]
Output: [1,2,4]

**Explanation:** The array represents the integer 123.

Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].

</aside>
"""

class Solution:
    def plusOne(self, digits):
        for i in range(len(digits)-1,-1,-1):
            if digits[i]<9:
                digits[i]+=1
                return digits
            digits[i]=0

        return [1]+[0]*len(digits)

s1= Solution()
s1.plusOne([1,2,3])





"""<aside>
ðŸ’¡ Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

**Example 1:**
Input: nums = [1,2,3,1]

Output: true

</aside>
"""

def checkDuplicatesWithinK(arr, n, k):

	# Creates an empty list
	myset = []

	# Traverse the input array
	for i in range(n):
	
		# If already present n hash, then we
		# found a duplicate within k distance
		if arr[i] in myset:
			return True

		# Add this item to hashset
		myset.append(arr[i])

		# Remove the k+1 distant item
		if (i >= k):
			myset.remove(arr[i - k])
	return False

# Driver Code
if __name__ == "__main__":
	
	arr = [1,2,3,1]
	n = len(arr)
	if (checkDuplicatesWithinK(arr, n, 3)):
		print("True")
	else:
		print("False")



"""<aside>
ðŸ’¡ Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the nonzero elements.

Note that you must do this in-place without making a copy of the array.

**Example 1:**
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

</aside>
"""

# Python3 code to move all zeroes
# at the end of array

# Function which pushes all
# zeros to end of an array.
def pushZerosToEnd(arr, n):
	count = 0 # Count of non-zero elements

	for i in range(n):
		if arr[i] != 0:
			
			# here count is incremented
			arr[count] = arr[i]
			count+=1
	
	# Now all non-zero elements have been
	# shifted to front and 'count' is set
	# as index of first 0. Make all
	# elements 0 from count to end.
	while count < n:
		arr[count] = 0
		count += 1
		
# Driver code
arr = [0,1,0,3,12]
n = len(arr)
pushZerosToEnd(arr, n)
print("Array after pushing all zeros to end of array:")
print(arr)



"""<aside>
ðŸ’¡ You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.

You are given an integer array nums representing the data status of this set after the error.

Find the number that occurs twice and the number that is missing and return them in the form of an array.

**Example 1:**
Input: nums = [1,2,2,4]
Output: [2,3]

</aside>
"""

class Solution(object):
    def findErrorNums(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """

        result = [0, 0]
        numsLen = len(nums)
        nums = sorted(nums)
        num = 0
        for i in range(numsLen - 1):
            num ^= (i + 1)
            if nums[i] == nums[i + 1]:
                result[0] = nums[i]
            else:
                num ^= nums[i]
        result[1] = num ^ numsLen ^ nums[numsLen - 1]
        return result

s1= Solution()
s1.findErrorNums([1,2,2,4])

